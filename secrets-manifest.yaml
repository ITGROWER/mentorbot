# Пример различных типов секретов для k3s
---
# 1. Базовый Secret с произвольными данными
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: default
type: Opaque
data:
  # Данные должны быть закодированы в base64
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQxMjM=  # password123
  api-key: YWJjZGVmZ2hpams=  # abcdefghijk

---
# 2. Secret для Docker Registry
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJyZWdpc3RyeS5leGFtcGxlLmNvbSI6IHsKICAgICAgInVzZXJuYW1lIjogInVzZXJuYW1lIiwKICAgICAgInBhc3N3b3JkIjogInBhc3N3b3JkIiwKICAgICAgImF1dGgiOiAiZFhObGNtNWhiV1U2Y0dGemMzZHZjbVE9IgogICAgfQogIH0KfQ==

---
# 3. TLS Secret для HTTPS
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: default
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...  # base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...  # base64 encoded private key

---
# 4. Secret для SSH ключей
apiVersion: v1
kind: Secret
metadata:
  name: ssh-secret
  namespace: default
type: kubernetes.io/ssh-auth
data:
  ssh-privatekey: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0=  # base64 encoded SSH private key

---
# 5. Secret для Basic Authentication
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth-secret
  namespace: default
type: kubernetes.io/basic-auth
data:
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQxMjM=  # password123

---
# 6. Deployment, использующий секреты
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-with-secrets
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app-with-secrets
  template:
    metadata:
      labels:
        app: app-with-secrets
    spec:
      # Использование Docker Registry Secret
      imagePullSecrets:
      - name: docker-registry-secret
      
      containers:
      - name: app
        image: nginx:latest
        
        # Использование секретов как переменных окружения
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: password
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: api-key
        
        # Монтирование секретов как файлов
        volumeMounts:
        - name: secret-volume
          mountPath: "/etc/secrets"
          readOnly: true
        - name: tls-volume
          mountPath: "/etc/ssl/certs"
          readOnly: true
        
        ports:
        - containerPort: 80
        - containerPort: 443
      
      volumes:
      # Монтирование обычного секрета
      - name: secret-volume
        secret:
          secretName: app-secrets
          items:
          - key: username
            path: username.txt
          - key: password
            path: password.txt
            mode: 0600  # Установка прав доступа
      
      # Монтирование TLS секрета
      - name: tls-volume
        secret:
          secretName: tls-secret
          defaultMode: 0400

---
# 7. Service для приложения
apiVersion: v1
kind: Service
metadata:
  name: app-service
  namespace: default
spec:
  selector:
    app: app-with-secrets
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  type: ClusterIP

---
# 8. Ingress с TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - app.example.com
    secretName: tls-secret
  rules:
  - host: app.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app-service
            port:
              number: 80