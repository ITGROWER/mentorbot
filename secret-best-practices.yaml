# Лучшие практики для работы с секретами в k3s

# 1. Namespace для секретов
apiVersion: v1
kind: Namespace
metadata:
  name: secrets-namespace

---
# 2. Секрет с ресурсными ограничениями
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: secrets-namespace
  labels:
    app: my-app
    tier: backend
  annotations:
    kubernetes.io/managed-by: "kubectl"
type: Opaque
data:
  api-key: YXBpLWtleS12YWx1ZQ==
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5leGFtcGxlLmNvbS9teWFi

---
# 3. ServiceAccount для безопасного доступа
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-app-service-account
  namespace: secrets-namespace

---
# 4. Role для работы с секретами
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: secrets-namespace
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]

---
# 5. RoleBinding для привязки ServiceAccount к Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-reader-binding
  namespace: secrets-namespace
subjects:
- kind: ServiceAccount
  name: my-app-service-account
  namespace: secrets-namespace
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io

---
# 6. Pod с использованием ServiceAccount
apiVersion: v1
kind: Pod
metadata:
  name: secured-pod
  namespace: secrets-namespace
spec:
  serviceAccountName: my-app-service-account
  containers:
  - name: app
    image: nginx:latest
    env:
    - name: API_KEY
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: api-key
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: database-url

---
# 7. CronJob с секретами
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-job
  namespace: secrets-namespace
spec:
  schedule: "0 2 * * *"  # ежедневно в 2:00
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: backup-job
        spec:
          serviceAccountName: my-app-service-account
          containers:
          - name: backup
            image: postgres:13
            command:
            - /bin/sh
            - -c
            - |
              export PGPASSWORD=$(cat /etc/secrets/db-password)
              pg_dump -h $DB_HOST -U $DB_USER $DB_NAME > backup.sql
            env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: app-secret
                  key: database-url
            - name: DB_USER
              value: "postgres"
            - name: DB_NAME
              value: "myapp"
            volumeMounts:
            - name: db-secret
              mountPath: /etc/secrets
              readOnly: true
          volumes:
          - name: db-secret
            secret:
              secretName: app-secret
          restartPolicy: OnFailure

---
# 8. StatefulSet с секретами
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database
  namespace: secrets-namespace
spec:
  serviceName: database
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      serviceAccountName: my-app-service-account
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: api-key
        - name: POSTGRES_DB
          value: "myapp"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: database-pvc

---
# 9. PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-pvc
  namespace: secrets-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi