# Пример использования ConfigMap и Secret вместе
---
# ConfigMap для не-чувствительных данных
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: default
data:
  # Обычные конфигурационные данные (не секретные)
  database.host: "db.example.com"
  database.port: "5432"
  database.name: "myapp"
  app.environment: "production"
  app.debug: "false"
  log.level: "info"
  
  # Конфигурационный файл
  app.properties: |
    server.port=8080
    server.context-path=/api
    logging.level.root=INFO
    spring.datasource.url=jdbc:postgresql://db.example.com:5432/myapp

---
# Secret для чувствительных данных
apiVersion: v1
kind: Secret
metadata:
  name: app-db-secrets
  namespace: default
type: Opaque
data:
  # Чувствительные данные (пароли, ключи и т.д.)
  database.username: bXl1c2Vy  # myuser
  database.password: bXlwYXNzd29yZA==  # mypassword
  jwt.secret: c3VwZXJzZWNyZXRrZXk=  # supersecretkey
  redis.password: cmVkaXNwYXNz  # redispass

---
# Deployment, использующий и ConfigMap, и Secret
apiVersion: apps/v1
kind: Deployment
metadata:
  name: full-app
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: full-app
  template:
    metadata:
      labels:
        app: full-app
    spec:
      containers:
      - name: app
        image: my-app:latest
        
        # Переменные окружения из ConfigMap
        envFrom:
        - configMapRef:
            name: app-config
        
        # Переменные окружения из Secret
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: app-db-secrets
              key: database.username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-db-secrets
              key: database.password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-db-secrets
              key: jwt.secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-db-secrets
              key: redis.password
        
        # Монтирование конфигурационных файлов
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: secret-volume
          mountPath: /etc/secrets
          readOnly: true
        
        ports:
        - containerPort: 8080
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      
      volumes:
      # ConfigMap как том
      - name: config-volume
        configMap:
          name: app-config
          items:
          - key: app.properties
            path: application.properties
      
      # Secret как том
      - name: secret-volume
        secret:
          secretName: app-db-secrets
          defaultMode: 0600

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: full-app-service
  namespace: default
spec:
  selector:
    app: full-app
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: full-app-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: full-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80